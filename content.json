{"meta":{"title":"特异型大光头的博客","subtitle":"","description":"","author":"特异型大光头","url":"https://ysbigb.github.io","root":"/mysite/"},"pages":[{"title":"links","date":"2020-04-25T09:24:53.000Z","updated":"2020-04-25T09:25:25.173Z","comments":true,"path":"links/index.html","permalink":"https://ysbigb.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"测试下markdown的视频音乐功能","slug":"测试下markdown的视频音乐功能","date":"2020-04-25T11:57:09.728Z","updated":"2020-04-25T12:06:27.855Z","comments":true,"path":"2020/04/25/测试下markdown的视频音乐功能/","link":"","permalink":"https://ysbigb.github.io/2020/04/25/%E6%B5%8B%E8%AF%95%E4%B8%8Bmarkdown%E7%9A%84%E8%A7%86%E9%A2%91%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD/","excerpt":"","text":"这是个视频","categories":[],"tags":[]},{"title":"笔记","slug":"笔记","date":"2020-04-25T09:02:25.365Z","updated":"2020-04-25T10:48:19.765Z","comments":true,"path":"2020/04/25/笔记/","link":"","permalink":"https://ysbigb.github.io/2020/04/25/%E7%AC%94%E8%AE%B0/","excerpt":"学习python的一些笔记","text":"学习python的一些笔记 python符合多个条件if i in range [a,b]等价于 if i == a and i == b字符属于某个区间if &quot;a&quot; &lt;= i &lt;= &quot;z&quot;第三个参数表示间隔几个数range(a,b,c) 如(1-10)奇数可以用range(1,10,2) 刷新输出print(&quot;\\r&quot;,end=&quot;&quot;)end=”” 阻止换行， “\\r”将光标移动到一开始的位置 常用字符串处理 函数 说明 str.center(int, &quot;c&quot;) 一共占int格子，不足用c补齐，str居中 &quot;{:=^20.2f}&quot;.format(float) 依次表示用等号补位，一共20个，小数点后两位 # 条件紧凑形式 ``` if &lt;条件&gt; else ``` # 循环语句else: ``` for i in range(9): do else: 循环执行完毕，没有因为break中断则执行else：里面的语句 ``` # random库 函数 描述 - - random() 生成0,1区间的随机数 randint(a,b) 生成ab区间的随机整数 randrange(a,b,k) 生成ab区间步长为k的随机整数 uniform(a,b) 生成ab区间的随机浮点数 choice(seq) 从序列seq中随机选择一个数 shuffle(seq) 打乱重排seq序列 # 匿名函数lambda ``` f = lamda x,y: x+y f(10,5) ``` # 分隔输出一行数字的方法 ``` for i in range(5): print(i,end=”,”) for i in range(5): print(“{},”.format(i),end=””) # 数据去重ls = [1,2,3,3,3,4]ls = list(set(ls)) # 字典操作 + d.keys() 返回键 + d.values() 返回值 + d.items() 用元祖的形式返回键值对a = [1,2,3,4,4,5,5,5,6,6,6,7,8]d={} for i in a:d[i] = a.count(i)print(d)for i in a: d[i] = d.get(i,0) +1print(d.keys())print(d.values())print(d.items()) 结果dict_keys([1, 2, 3, 4, 5, 6, 7, 8])dict_values([1, 1, 1, 2, 3, 3, 1, 1])dict_items([(1, 1), (2, 1), (3, 1), (4, 2), (5, 3), (6, 3), (7, 1), (8, 1)]) 遍历字典，k为每个keysfor k in d: # 字符串操作str = “p,y,t,h,o,n”str.split(“,”) #用”,”分隔文本，返回一个列表[‘p’,’y’,’t’,’h’,’o’,’n’] ls = [‘p’,’y’,’t’,’h’,’o’,’n’]“$”.join(ls) #用$符号将ls里的每个元素分隔，最后返回一个字符串p$y$t$h$o$n","categories":[],"tags":[]},{"title":"爬虫笔记","slug":"爬虫笔记","date":"2020-04-25T09:02:07.160Z","updated":"2020-04-25T10:48:30.362Z","comments":true,"path":"2020/04/25/爬虫笔记/","link":"","permalink":"https://ysbigb.github.io/2020/04/25/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/","excerpt":"爬虫的笔记","text":"爬虫的笔记 获取运行间隔时间import time scale = 50 print(&quot;执行开始&quot;.center(scale//2,&quot;-&quot;)) # .center() 控制输出的样式，宽度为 25//2，即 22，汉字居中，两侧填充 - start = time.perf_counter() # 调用一次 perf_counter()，从计算机系统里随机选一个时间点A，计算其距离当前时间点B1有多少秒。当第二次调用该函数时，默认从第一次调用的时间点A算起，距离当前时间点B2有多少秒。两个函数取差，即实现从时间点B1到B2的计时功能。 for i in range(scale+1): a = &#39;*&#39; * i # i 个长度的 * 符号 b = &#39;.&#39; * (scale-i) # scale-i） 个长度的 . 符号。符号 * 和 . 总长度为50 c = (i/scale)*100 # 显示当前进度，百分之多少 dur = time.perf_counter() - start # 计时，计算进度条走到某一百分比的用时 print(&quot;\\r{:^3.0f}%[{}-&gt;{}]{:.2f}s&quot;.format(c,a,b,dur),end=&#39;&#39;) # \\r用来在每次输出完成后，将光标移至行首，这样保证进度条始终在同一行输出，即在一行不断刷新的效果；{:^3.0f}，输出格式为居中，占3位，小数点后0位，浮点型数，对应输出的数为c；{}，对应输出的数为a；{}，对应输出的数为b；{:.2f}，输出有两位小数的浮点数，对应输出的数为dur；end=&#39;&#39;，用来保证不换行，不加这句默认换行。 time.sleep(0.1) # 在输出下一个百分之几的进度前，停止0.1秒 print(&quot;\\n&quot;+&quot;执行结果&quot;.center(scale//2,&#39;-&#39;))通用爬虫模板import requests def getHtmlTxt(url): try: r = requests.get(url, timeout = 30) r.raise_for_status() #如果返回status_code不是200，就抛出异常 r.encoding = r.apparent_encoding return r.text except: return &quot;产生异常&quot; if __name__ == &#39;__main__&#39;: #如果当前运行程序是该程序，则执行，如果作为库导入，则不运行 url = &quot;https://www.baidu.com&quot; print(getHtmlTxt(url))下行遍历soup.&lt;tag&gt;.children 返回iteration类型 仅儿子 soup.&lt;tag&gt;.contents 返回list类型 仅儿子 soup.&lt;tag&gt;.descendants 返回iteration类型 所有子孙节点上行遍历soup.&lt;tag&gt;.parent 仅父 soup.&lt;tag&gt;.parents 所有上级节点平行遍历soup.&lt;tag&gt;.next_sibling 仅下一个 soup.&lt;tag&gt;.next_siblings 所有后面的 soup.&lt;tag&gt;.previous_sibling 仅上一个 soup.&lt;tag&gt;.previous_siblings 所有前面的格式化和编码.prettify() 格式化，等于在每个标签后面加上换行符列表生成器for后面的if是过滤条件，不能带else a = [x+1 for x in range(1,11) if x%2 == 0 ]列表相加a = [] for i in range(10): a += [i] print(a) #输出[0,1,2,3,4,5,6,7,8,9]","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-04-25T08:37:01.115Z","updated":"2020-04-25T10:48:21.195Z","comments":true,"path":"2020/04/25/hello-world/","link":"","permalink":"https://ysbigb.github.io/2020/04/25/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}