<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>笔记</title>
      <link href="/mysite/2020/04/25/%E7%AC%94%E8%AE%B0/"/>
      <url>/mysite/2020/04/25/%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>学习python的一些笔记</p><a id="more"></a><h1 id="python符合多个条件"><a href="#python符合多个条件" class="headerlink" title="python符合多个条件"></a>python符合多个条件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if i in range [a,b]</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if i &#x3D;&#x3D; a and i &#x3D;&#x3D; b</span><br></pre></td></tr></table></figure><h1 id="字符属于某个区间"><a href="#字符属于某个区间" class="headerlink" title="字符属于某个区间"></a>字符属于某个区间</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if &quot;a&quot; &lt;&#x3D; i &lt;&#x3D; &quot;z&quot;</span><br></pre></td></tr></table></figure><h1 id="第三个参数表示间隔几个数"><a href="#第三个参数表示间隔几个数" class="headerlink" title="第三个参数表示间隔几个数"></a>第三个参数表示间隔几个数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">range(a,b,c)</span><br></pre></td></tr></table></figure><p>如(1-10)奇数可以用<br>range(1,10,2)</p><h1 id="刷新输出"><a href="#刷新输出" class="headerlink" title="刷新输出"></a>刷新输出</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;\r&quot;,end&#x3D;&quot;&quot;)</span><br></pre></td></tr></table></figure><p>end=”” 阻止换行， “\r”将光标移动到一开始的位置</p><h1 id="常用字符串处理"><a href="#常用字符串处理" class="headerlink" title="常用字符串处理"></a>常用字符串处理</h1><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>str.center(int, &quot;c&quot;)</code></td><td>一共占int格子，不足用c补齐，str居中</td></tr><tr><td><code>&quot;{:=^20.2f}&quot;.format(float)</code></td><td>依次表示用等号补位，一共20个，小数点后两位</td></tr><tr><td># 条件紧凑形式</td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a&gt; if &lt;条件&gt; else &lt;b&gt;</span><br></pre></td></tr></table></figure></td><td></td></tr><tr><td># 循环语句else:</td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in range(9):</span><br><span class="line">    do</span><br><span class="line">else:</span><br><span class="line">    循环执行完毕，没有因为break中断则执行else：里面的语句</span><br></pre></td></tr></table></figure></td><td></td></tr><tr><td># random库</td><td></td></tr><tr><td>函数</td><td>描述</td></tr><tr><td>-</td><td>-</td></tr><tr><td><code>random()</code></td><td>生成0,1区间的随机数</td></tr><tr><td><code>randint(a,b)</code></td><td>生成ab区间的随机整数</td></tr><tr><td><code>randrange(a,b,k)</code></td><td>生成ab区间步长为k的随机整数</td></tr><tr><td><code>uniform(a,b)</code></td><td>生成ab区间的随机浮点数</td></tr><tr><td><code>choice(seq)</code></td><td>从序列seq中随机选择一个数</td></tr><tr><td><code>shuffle(seq)</code></td><td>打乱重排seq序列</td></tr><tr><td># 匿名函数lambda</td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f &#x3D; lamda x,y: x+y</span><br><span class="line">f(10,5)</span><br></pre></td></tr></table></figure></td><td></td></tr><tr><td># 分隔输出一行数字的方法</td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for i in range(5):</span><br><span class="line">    print(i,end&#x3D;&quot;,&quot;)</span><br><span class="line">    </span><br><span class="line">for i in range(5):</span><br><span class="line">    print(&quot;&#123;&#125;,&quot;.format(i),end&#x3D;&quot;&quot;)</span><br></pre></td></tr></table></figure></td><td></td></tr></tbody></table><h1 id="数据去重"><a href="#数据去重" class="headerlink" title="数据去重"></a>数据去重</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls &#x3D; [1,2,3,3,3,4]</span><br><span class="line">ls &#x3D; list(set(ls))</span><br></pre></td></tr></table></figure><h1 id="字典操作"><a href="#字典操作" class="headerlink" title="字典操作"></a>字典操作</h1><ul><li>d.keys() 返回键</li><li>d.values() 返回值</li><li>d.items() 用元祖的形式返回键值对<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; [1,2,3,4,4,5,5,5,6,6,6,7,8]</span><br><span class="line">d&#x3D;&#123;&#125;</span><br><span class="line"></span><br><span class="line"># for i in a:</span><br><span class="line">#     d[i] &#x3D; a.count(i)</span><br><span class="line"># print(d)</span><br><span class="line"></span><br><span class="line">for i in a:</span><br><span class="line">    d[i] &#x3D; d.get(i,0) +1</span><br><span class="line">print(d.keys())</span><br><span class="line">print(d.values())</span><br><span class="line">print(d.items())</span><br></pre></td></tr></table></figure>结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict_keys([1, 2, 3, 4, 5, 6, 7, 8])</span><br><span class="line">dict_values([1, 1, 1, 2, 3, 3, 1, 1])</span><br><span class="line">dict_items([(1, 1), (2, 1), (3, 1), (4, 2), (5, 3), (6, 3), (7, 1), (8, 1)])</span><br></pre></td></tr></table></figure>遍历字典，k为每个keys<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for k in d:</span><br></pre></td></tr></table></figure><h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str &#x3D; &quot;p,y,t,h,o,n&quot;</span><br><span class="line">str.split(&quot;,&quot;) #用&quot;,&quot;分隔文本，返回一个列表[&#39;p&#39;,&#39;y&#39;,&#39;t&#39;,&#39;h&#39;,&#39;o&#39;,&#39;n&#39;]</span><br><span class="line"></span><br><span class="line">ls &#x3D; [&#39;p&#39;,&#39;y&#39;,&#39;t&#39;,&#39;h&#39;,&#39;o&#39;,&#39;n&#39;]</span><br><span class="line">&quot;$&quot;.join(ls) #用$符号将ls里的每个元素分隔，最后返回一个字符串p$y$t$h$o$n</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>爬虫笔记</title>
      <link href="/mysite/2020/04/25/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/"/>
      <url>/mysite/2020/04/25/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>爬虫的笔记</p><a id="more"></a><h1 id="获取运行间隔时间"><a href="#获取运行间隔时间" class="headerlink" title="获取运行间隔时间"></a>获取运行间隔时间</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">scale &#x3D; 50 </span><br><span class="line"></span><br><span class="line">print(&quot;执行开始&quot;.center(scale&#x2F;&#x2F;2,&quot;-&quot;))  # .center() 控制输出的样式，宽度为 25&#x2F;&#x2F;2，即 22，汉字居中，两侧填充 -</span><br><span class="line"></span><br><span class="line">start &#x3D; time.perf_counter() # 调用一次 perf_counter()，从计算机系统里随机选一个时间点A，计算其距离当前时间点B1有多少秒。当第二次调用该函数时，默认从第一次调用的时间点A算起，距离当前时间点B2有多少秒。两个函数取差，即实现从时间点B1到B2的计时功能。</span><br><span class="line">for i in range(scale+1):   </span><br><span class="line">    a &#x3D; &#39;*&#39; * i             # i 个长度的 * 符号</span><br><span class="line">    b &#x3D; &#39;.&#39; * (scale-i)  # scale-i） 个长度的 . 符号。符号 * 和 . 总长度为50 </span><br><span class="line">    c &#x3D; (i&#x2F;scale)*100  # 显示当前进度，百分之多少</span><br><span class="line">    dur &#x3D; time.perf_counter() - start    # 计时，计算进度条走到某一百分比的用时</span><br><span class="line">    print(&quot;\r&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.2f&#125;s&quot;.format(c,a,b,dur),end&#x3D;&#39;&#39;)  # \r用来在每次输出完成后，将光标移至行首，这样保证进度条始终在同一行输出，即在一行不断刷新的效果；&#123;:^3.0f&#125;，输出格式为居中，占3位，小数点后0位，浮点型数，对应输出的数为c；&#123;&#125;，对应输出的数为a；&#123;&#125;，对应输出的数为b；&#123;:.2f&#125;，输出有两位小数的浮点数，对应输出的数为dur；end&#x3D;&#39;&#39;，用来保证不换行，不加这句默认换行。</span><br><span class="line">    time.sleep(0.1)     # 在输出下一个百分之几的进度前，停止0.1秒</span><br><span class="line">print(&quot;\n&quot;+&quot;执行结果&quot;.center(scale&#x2F;&#x2F;2,&#39;-&#39;))</span><br></pre></td></tr></table></figure><h1 id="通用爬虫模板"><a href="#通用爬虫模板" class="headerlink" title="通用爬虫模板"></a>通用爬虫模板</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">def getHtmlTxt(url):</span><br><span class="line">    try:</span><br><span class="line">        r &#x3D; requests.get(url, timeout &#x3D; 30)</span><br><span class="line">        r.raise_for_status() #如果返回status_code不是200，就抛出异常</span><br><span class="line">        r.encoding &#x3D; r.apparent_encoding</span><br><span class="line">        return r.text</span><br><span class="line">    except:</span><br><span class="line">        return &quot;产生异常&quot;</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;: #如果当前运行程序是该程序，则执行，如果作为库导入，则不运行</span><br><span class="line">    url &#x3D; &quot;https:&#x2F;&#x2F;www.baidu.com&quot;</span><br><span class="line">    print(getHtmlTxt(url))</span><br></pre></td></tr></table></figure><h1 id="下行遍历"><a href="#下行遍历" class="headerlink" title="下行遍历"></a>下行遍历</h1><pre><code>soup.&lt;tag&gt;.children 返回iteration类型 仅儿子soup.&lt;tag&gt;.contents 返回list类型 仅儿子soup.&lt;tag&gt;.descendants 返回iteration类型 所有子孙节点</code></pre><h1 id="上行遍历"><a href="#上行遍历" class="headerlink" title="上行遍历"></a>上行遍历</h1><pre><code>soup.&lt;tag&gt;.parent 仅父soup.&lt;tag&gt;.parents 所有上级节点</code></pre><h1 id="平行遍历"><a href="#平行遍历" class="headerlink" title="平行遍历"></a>平行遍历</h1><pre><code>soup.&lt;tag&gt;.next_sibling 仅下一个soup.&lt;tag&gt;.next_siblings 所有后面的soup.&lt;tag&gt;.previous_sibling 仅上一个soup.&lt;tag&gt;.previous_siblings 所有前面的</code></pre><h1 id="格式化和编码"><a href="#格式化和编码" class="headerlink" title="格式化和编码"></a>格式化和编码</h1><pre><code>.prettify() 格式化，等于在每个标签后面加上换行符</code></pre><h1 id="列表生成器"><a href="#列表生成器" class="headerlink" title="列表生成器"></a>列表生成器</h1><p>for后面的if是过滤条件，不能带else</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; [x+1 for x in range(1,11) if x%2 &#x3D;&#x3D; 0 ]</span><br></pre></td></tr></table></figure><h1 id="列表相加"><a href="#列表相加" class="headerlink" title="列表相加"></a>列表相加</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; []</span><br><span class="line">for i in range(10):</span><br><span class="line">    a +&#x3D; [i]</span><br><span class="line">print(a) #输出[0,1,2,3,4,5,6,7,8,9]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/mysite/2020/04/25/hello-world/"/>
      <url>/mysite/2020/04/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
